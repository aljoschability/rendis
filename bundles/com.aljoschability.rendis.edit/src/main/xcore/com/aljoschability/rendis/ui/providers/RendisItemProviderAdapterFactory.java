/**
 * Copyright 2013 by Aljoschability and others. All rights reserved.
 * This program and its materials are made available under the terms of
 * the Eclipse Public License v1.0 which is referenced in this distribution.
 * 
 * 	Contributors:
 * 		Aljoscha Hark <aljoschability@gmail.com> - Initial code
 */
package com.aljoschability.rendis.ui.providers;

import com.aljoschability.rendis.util.RendisAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class RendisItemProviderAdapterFactory extends RendisAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RendisItemProviderAdapterFactory()
  {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link com.aljoschability.rendis.Residence} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ResidenceItemProvider residenceItemProvider;

  /**
   * This creates an adapter for a {@link com.aljoschability.rendis.Residence}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createResidenceAdapter()
  {
    if (residenceItemProvider == null)
    {
      residenceItemProvider = new ResidenceItemProvider(this);
    }

    return residenceItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link com.aljoschability.rendis.Supplier} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SupplierItemProvider supplierItemProvider;

  /**
   * This creates an adapter for a {@link com.aljoschability.rendis.Supplier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createSupplierAdapter()
  {
    if (supplierItemProvider == null)
    {
      supplierItemProvider = new SupplierItemProvider(this);
    }

    return supplierItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link com.aljoschability.rendis.Building} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BuildingItemProvider buildingItemProvider;

  /**
   * This creates an adapter for a {@link com.aljoschability.rendis.Building}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createBuildingAdapter()
  {
    if (buildingItemProvider == null)
    {
      buildingItemProvider = new BuildingItemProvider(this);
    }

    return buildingItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link com.aljoschability.rendis.ChannelPort} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ChannelPortItemProvider channelPortItemProvider;

  /**
   * This creates an adapter for a {@link com.aljoschability.rendis.ChannelPort}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createChannelPortAdapter()
  {
    if (channelPortItemProvider == null)
    {
      channelPortItemProvider = new ChannelPortItemProvider(this);
    }

    return channelPortItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link com.aljoschability.rendis.Channel} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ChannelItemProvider channelItemProvider;

  /**
   * This creates an adapter for a {@link com.aljoschability.rendis.Channel}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createChannelAdapter()
  {
    if (channelItemProvider == null)
    {
      channelItemProvider = new ChannelItemProvider(this);
    }

    return channelItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link com.aljoschability.rendis.Floor} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FloorItemProvider floorItemProvider;

  /**
   * This creates an adapter for a {@link com.aljoschability.rendis.Floor}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createFloorAdapter()
  {
    if (floorItemProvider == null)
    {
      floorItemProvider = new FloorItemProvider(this);
    }

    return floorItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link com.aljoschability.rendis.Room} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RoomItemProvider roomItemProvider;

  /**
   * This creates an adapter for a {@link com.aljoschability.rendis.Room}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createRoomAdapter()
  {
    if (roomItemProvider == null)
    {
      roomItemProvider = new RoomItemProvider(this);
    }

    return roomItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link com.aljoschability.rendis.Cubicle} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CubicleItemProvider cubicleItemProvider;

  /**
   * This creates an adapter for a {@link com.aljoschability.rendis.Cubicle}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCubicleAdapter()
  {
    if (cubicleItemProvider == null)
    {
      cubicleItemProvider = new CubicleItemProvider(this);
    }

    return cubicleItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link com.aljoschability.rendis.ResidualCurrentProtectiveDevice} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ResidualCurrentProtectiveDeviceItemProvider residualCurrentProtectiveDeviceItemProvider;

  /**
   * This creates an adapter for a {@link com.aljoschability.rendis.ResidualCurrentProtectiveDevice}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createResidualCurrentProtectiveDeviceAdapter()
  {
    if (residualCurrentProtectiveDeviceItemProvider == null)
    {
      residualCurrentProtectiveDeviceItemProvider = new ResidualCurrentProtectiveDeviceItemProvider(this);
    }

    return residualCurrentProtectiveDeviceItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link com.aljoschability.rendis.CircuitBreaker} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CircuitBreakerItemProvider circuitBreakerItemProvider;

  /**
   * This creates an adapter for a {@link com.aljoschability.rendis.CircuitBreaker}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCircuitBreakerAdapter()
  {
    if (circuitBreakerItemProvider == null)
    {
      circuitBreakerItemProvider = new CircuitBreakerItemProvider(this);
    }

    return circuitBreakerItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link com.aljoschability.rendis.Counter} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CounterItemProvider counterItemProvider;

  /**
   * This creates an adapter for a {@link com.aljoschability.rendis.Counter}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCounterAdapter()
  {
    if (counterItemProvider == null)
    {
      counterItemProvider = new CounterItemProvider(this);
    }

    return counterItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link com.aljoschability.rendis.StairwaySwitchTimer} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StairwaySwitchTimerItemProvider stairwaySwitchTimerItemProvider;

  /**
   * This creates an adapter for a {@link com.aljoschability.rendis.StairwaySwitchTimer}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createStairwaySwitchTimerAdapter()
  {
    if (stairwaySwitchTimerItemProvider == null)
    {
      stairwaySwitchTimerItemProvider = new StairwaySwitchTimerItemProvider(this);
    }

    return stairwaySwitchTimerItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link com.aljoschability.rendis.Transformator} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TransformatorItemProvider transformatorItemProvider;

  /**
   * This creates an adapter for a {@link com.aljoschability.rendis.Transformator}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTransformatorAdapter()
  {
    if (transformatorItemProvider == null)
    {
      transformatorItemProvider = new TransformatorItemProvider(this);
    }

    return transformatorItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link com.aljoschability.rendis.WirePort} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected WirePortItemProvider wirePortItemProvider;

  /**
   * This creates an adapter for a {@link com.aljoschability.rendis.WirePort}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createWirePortAdapter()
  {
    if (wirePortItemProvider == null)
    {
      wirePortItemProvider = new WirePortItemProvider(this);
    }

    return wirePortItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link com.aljoschability.rendis.Wire} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected WireItemProvider wireItemProvider;

  /**
   * This creates an adapter for a {@link com.aljoschability.rendis.Wire}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createWireAdapter()
  {
    if (wireItemProvider == null)
    {
      wireItemProvider = new WireItemProvider(this);
    }

    return wireItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link com.aljoschability.rendis.DistributionBox} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DistributionBoxItemProvider distributionBoxItemProvider;

  /**
   * This creates an adapter for a {@link com.aljoschability.rendis.DistributionBox}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDistributionBoxAdapter()
  {
    if (distributionBoxItemProvider == null)
    {
      distributionBoxItemProvider = new DistributionBoxItemProvider(this);
    }

    return distributionBoxItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link com.aljoschability.rendis.Device} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DeviceItemProvider deviceItemProvider;

  /**
   * This creates an adapter for a {@link com.aljoschability.rendis.Device}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDeviceAdapter()
  {
    if (deviceItemProvider == null)
    {
      deviceItemProvider = new DeviceItemProvider(this);
    }

    return deviceItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link com.aljoschability.rendis.OffSwitch} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OffSwitchItemProvider offSwitchItemProvider;

  /**
   * This creates an adapter for a {@link com.aljoschability.rendis.OffSwitch}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createOffSwitchAdapter()
  {
    if (offSwitchItemProvider == null)
    {
      offSwitchItemProvider = new OffSwitchItemProvider(this);
    }

    return offSwitchItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link com.aljoschability.rendis.ToggleSwitch} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ToggleSwitchItemProvider toggleSwitchItemProvider;

  /**
   * This creates an adapter for a {@link com.aljoschability.rendis.ToggleSwitch}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createToggleSwitchAdapter()
  {
    if (toggleSwitchItemProvider == null)
    {
      toggleSwitchItemProvider = new ToggleSwitchItemProvider(this);
    }

    return toggleSwitchItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link com.aljoschability.rendis.IntermediateSwitch} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IntermediateSwitchItemProvider intermediateSwitchItemProvider;

  /**
   * This creates an adapter for a {@link com.aljoschability.rendis.IntermediateSwitch}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createIntermediateSwitchAdapter()
  {
    if (intermediateSwitchItemProvider == null)
    {
      intermediateSwitchItemProvider = new IntermediateSwitchItemProvider(this);
    }

    return intermediateSwitchItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link com.aljoschability.rendis.TwoCircuitSwitch} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TwoCircuitSwitchItemProvider twoCircuitSwitchItemProvider;

  /**
   * This creates an adapter for a {@link com.aljoschability.rendis.TwoCircuitSwitch}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTwoCircuitSwitchAdapter()
  {
    if (twoCircuitSwitchItemProvider == null)
    {
      twoCircuitSwitchItemProvider = new TwoCircuitSwitchItemProvider(this);
    }

    return twoCircuitSwitchItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link com.aljoschability.rendis.RetractiveSwitch} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RetractiveSwitchItemProvider retractiveSwitchItemProvider;

  /**
   * This creates an adapter for a {@link com.aljoschability.rendis.RetractiveSwitch}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createRetractiveSwitchAdapter()
  {
    if (retractiveSwitchItemProvider == null)
    {
      retractiveSwitchItemProvider = new RetractiveSwitchItemProvider(this);
    }

    return retractiveSwitchItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link com.aljoschability.rendis.PowerSocket} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PowerSocketItemProvider powerSocketItemProvider;

  /**
   * This creates an adapter for a {@link com.aljoschability.rendis.PowerSocket}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPowerSocketAdapter()
  {
    if (powerSocketItemProvider == null)
    {
      powerSocketItemProvider = new PowerSocketItemProvider(this);
    }

    return powerSocketItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory()
  {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
  {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type)
  {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type)
  {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type)
  {
    if (isFactoryForType(type))
    {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
      {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void fireNotifyChanged(Notification notification)
  {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null)
    {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void dispose()
  {
    if (residenceItemProvider != null) residenceItemProvider.dispose();
    if (supplierItemProvider != null) supplierItemProvider.dispose();
    if (buildingItemProvider != null) buildingItemProvider.dispose();
    if (channelPortItemProvider != null) channelPortItemProvider.dispose();
    if (channelItemProvider != null) channelItemProvider.dispose();
    if (floorItemProvider != null) floorItemProvider.dispose();
    if (roomItemProvider != null) roomItemProvider.dispose();
    if (cubicleItemProvider != null) cubicleItemProvider.dispose();
    if (residualCurrentProtectiveDeviceItemProvider != null) residualCurrentProtectiveDeviceItemProvider.dispose();
    if (circuitBreakerItemProvider != null) circuitBreakerItemProvider.dispose();
    if (counterItemProvider != null) counterItemProvider.dispose();
    if (stairwaySwitchTimerItemProvider != null) stairwaySwitchTimerItemProvider.dispose();
    if (transformatorItemProvider != null) transformatorItemProvider.dispose();
    if (wirePortItemProvider != null) wirePortItemProvider.dispose();
    if (wireItemProvider != null) wireItemProvider.dispose();
    if (distributionBoxItemProvider != null) distributionBoxItemProvider.dispose();
    if (deviceItemProvider != null) deviceItemProvider.dispose();
    if (offSwitchItemProvider != null) offSwitchItemProvider.dispose();
    if (toggleSwitchItemProvider != null) toggleSwitchItemProvider.dispose();
    if (intermediateSwitchItemProvider != null) intermediateSwitchItemProvider.dispose();
    if (twoCircuitSwitchItemProvider != null) twoCircuitSwitchItemProvider.dispose();
    if (retractiveSwitchItemProvider != null) retractiveSwitchItemProvider.dispose();
    if (powerSocketItemProvider != null) powerSocketItemProvider.dispose();
  }

}
